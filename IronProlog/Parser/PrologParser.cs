//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/Prolog.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace IronProlog.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class PrologParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, ATOM=3, VARIABLE=4, NUMBER=5, COMMA=6, STOP=7, WHITESPACE=8;
	public const int
		RULE_knowledge_base = 0, RULE_clause = 1, RULE_fact = 2, RULE_compound = 3, 
		RULE_functor = 4, RULE_term = 5;
	public static readonly string[] ruleNames = {
		"knowledge_base", "clause", "fact", "compound", "functor", "term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, null, "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "ATOM", "VARIABLE", "NUMBER", "COMMA", "STOP", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Prolog.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PrologParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PrologParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PrologParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Knowledge_baseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PrologParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClauseContext[] clause() {
			return GetRuleContexts<ClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClauseContext clause(int i) {
			return GetRuleContext<ClauseContext>(i);
		}
		public Knowledge_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_knowledge_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.EnterKnowledge_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.ExitKnowledge_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrologVisitor<TResult> typedVisitor = visitor as IPrologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKnowledge_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Knowledge_baseContext knowledge_base() {
		Knowledge_baseContext _localctx = new Knowledge_baseContext(Context, State);
		EnterRule(_localctx, 0, RULE_knowledge_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 12;
				clause();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ATOM );
			State = 17;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactContext fact() {
			return GetRuleContext<FactContext>(0);
		}
		public ClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.EnterClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.ExitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrologVisitor<TResult> typedVisitor = visitor as IPrologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClauseContext clause() {
		ClauseContext _localctx = new ClauseContext(Context, State);
		EnterRule(_localctx, 2, RULE_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			fact();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundContext compound() {
			return GetRuleContext<CompoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(PrologParser.STOP, 0); }
		public FactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.EnterFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.ExitFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrologVisitor<TResult> typedVisitor = visitor as IPrologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactContext fact() {
		FactContext _localctx = new FactContext(Context, State);
		EnterRule(_localctx, 4, RULE_fact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			compound();
			State = 22;
			Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctorContext functor() {
			return GetRuleContext<FunctorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PrologParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PrologParser.COMMA, i);
		}
		public CompoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.EnterCompound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.ExitCompound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrologVisitor<TResult> typedVisitor = visitor as IPrologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundContext compound() {
		CompoundContext _localctx = new CompoundContext(Context, State);
		EnterRule(_localctx, 6, RULE_compound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			functor();
			State = 25;
			Match(T__0);
			State = 26;
			term();
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 27;
				Match(COMMA);
				State = 28;
				term();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOM() { return GetToken(PrologParser.ATOM, 0); }
		public FunctorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.EnterFunctor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.ExitFunctor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrologVisitor<TResult> typedVisitor = visitor as IPrologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctorContext functor() {
		FunctorContext _localctx = new FunctorContext(Context, State);
		EnterRule(_localctx, 8, RULE_functor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(ATOM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Atom_termContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOM() { return GetToken(PrologParser.ATOM, 0); }
		public Atom_termContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.EnterAtom_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.ExitAtom_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrologVisitor<TResult> typedVisitor = visitor as IPrologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Variable_termContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(PrologParser.VARIABLE, 0); }
		public Variable_termContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.EnterVariable_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.ExitVariable_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrologVisitor<TResult> typedVisitor = visitor as IPrologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Number_termContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PrologParser.NUMBER, 0); }
		public Number_termContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.EnterNumber_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.ExitNumber_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrologVisitor<TResult> typedVisitor = visitor as IPrologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Compound_termContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundContext compound() {
			return GetRuleContext<CompoundContext>(0);
		}
		public Compound_termContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.EnterCompound_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrologListener typedListener = listener as IPrologListener;
			if (typedListener != null) typedListener.ExitCompound_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrologVisitor<TResult> typedVisitor = visitor as IPrologVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 10, RULE_term);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new Compound_termContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				compound();
				}
				break;
			case 2:
				_localctx = new Atom_termContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				Match(ATOM);
				}
				break;
			case 3:
				_localctx = new Variable_termContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				Match(VARIABLE);
				}
				break;
			case 4:
				_localctx = new Number_termContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 41;
				Match(NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,8,45,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,4,0,14,8,
		0,11,0,12,0,15,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,5,3,30,
		8,3,10,3,12,3,33,9,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,3,5,43,8,5,1,5,0,
		0,6,0,2,4,6,8,10,0,0,43,0,13,1,0,0,0,2,19,1,0,0,0,4,21,1,0,0,0,6,24,1,
		0,0,0,8,36,1,0,0,0,10,42,1,0,0,0,12,14,3,2,1,0,13,12,1,0,0,0,14,15,1,0,
		0,0,15,13,1,0,0,0,15,16,1,0,0,0,16,17,1,0,0,0,17,18,5,0,0,1,18,1,1,0,0,
		0,19,20,3,4,2,0,20,3,1,0,0,0,21,22,3,6,3,0,22,23,5,7,0,0,23,5,1,0,0,0,
		24,25,3,8,4,0,25,26,5,1,0,0,26,31,3,10,5,0,27,28,5,6,0,0,28,30,3,10,5,
		0,29,27,1,0,0,0,30,33,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,0,32,34,1,0,0,
		0,33,31,1,0,0,0,34,35,5,2,0,0,35,7,1,0,0,0,36,37,5,3,0,0,37,9,1,0,0,0,
		38,43,3,6,3,0,39,43,5,3,0,0,40,43,5,4,0,0,41,43,5,5,0,0,42,38,1,0,0,0,
		42,39,1,0,0,0,42,40,1,0,0,0,42,41,1,0,0,0,43,11,1,0,0,0,3,15,31,42
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace IronProlog.Parser
