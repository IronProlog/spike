//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from IronProlog/Grammar/Prolog.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace IronProlog.Parser {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="PrologParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public interface IPrologVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.knowledge_base"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKnowledge_base([NotNull] PrologParser.Knowledge_baseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClause([NotNull] PrologParser.ClauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.fact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFact([NotNull] PrologParser.FactContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRule([NotNull] PrologParser.RuleContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.complex"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComplex([NotNull] PrologParser.ComplexContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>unaryBody</c>
	/// labeled alternative in <see cref="PrologParser.body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryBody([NotNull] PrologParser.UnaryBodyContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>connectiveBody</c>
	/// labeled alternative in <see cref="PrologParser.body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConnectiveBody([NotNull] PrologParser.ConnectiveBodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.functor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctor([NotNull] PrologParser.FunctorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitList([NotNull] PrologParser.ListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.deconstruct"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeconstruct([NotNull] PrologParser.DeconstructContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.head"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitHead([NotNull] PrologParser.HeadContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>termItem</c>
	/// labeled alternative in <see cref="PrologParser.item"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTermItem([NotNull] PrologParser.TermItemContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>variableItem</c>
	/// labeled alternative in <see cref="PrologParser.item"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableItem([NotNull] PrologParser.VariableItemContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ignoreItem</c>
	/// labeled alternative in <see cref="PrologParser.item"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIgnoreItem([NotNull] PrologParser.IgnoreItemContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>variableTail</c>
	/// labeled alternative in <see cref="PrologParser.tail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableTail([NotNull] PrologParser.VariableTailContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>emptyTail</c>
	/// labeled alternative in <see cref="PrologParser.tail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmptyTail([NotNull] PrologParser.EmptyTailContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ignoreTail</c>
	/// labeled alternative in <see cref="PrologParser.tail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIgnoreTail([NotNull] PrologParser.IgnoreTailContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>complexTerm</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComplexTerm([NotNull] PrologParser.ComplexTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>listTerm</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitListTerm([NotNull] PrologParser.ListTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>deconstructTerm</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeconstructTerm([NotNull] PrologParser.DeconstructTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>atomTerm</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAtomTerm([NotNull] PrologParser.AtomTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>variableTerm</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableTerm([NotNull] PrologParser.VariableTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numberTerm</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberTerm([NotNull] PrologParser.NumberTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>and</c>
	/// labeled alternative in <see cref="PrologParser.connective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnd([NotNull] PrologParser.AndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>or</c>
	/// labeled alternative in <see cref="PrologParser.connective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOr([NotNull] PrologParser.OrContext context);
}
} // namespace IronProlog.Parser
