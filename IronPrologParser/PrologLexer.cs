//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from IronProlog/Grammar/Prolog.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace IronProlog.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class PrologLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, ATOM=3, IF=4, VARIABLE=5, NUMBER=6, COMMA=7, STOP=8, WHITESPACE=9;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "ATOM", "IF", "VARIABLE", "NUMBER", "COMMA", "STOP", "WHITESPACE"
	};


	public PrologLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PrologLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, "':-'", null, null, "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "ATOM", "IF", "VARIABLE", "NUMBER", "COMMA", "STOP", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Prolog.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PrologLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,9,70,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,1,0,1,0,1,1,1,1,1,2,1,2,5,2,26,8,2,10,2,12,2,29,9,2,1,
		2,1,2,4,2,33,8,2,11,2,12,2,34,1,2,3,2,38,8,2,1,3,1,3,1,3,1,4,1,4,5,4,45,
		8,4,10,4,12,4,48,9,4,1,5,4,5,51,8,5,11,5,12,5,52,1,5,1,5,4,5,57,8,5,11,
		5,12,5,58,3,5,61,8,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,34,0,9,1,1,3,2,
		5,3,7,4,9,5,11,6,13,7,15,8,17,9,1,0,5,1,0,97,122,3,0,65,90,95,95,97,122,
		1,0,65,90,1,0,48,57,3,0,9,10,13,13,32,32,76,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,17,1,0,0,0,1,19,1,0,0,0,3,21,1,0,0,0,5,37,1,0,0,0,7,39,1,0,0,0,9,42,
		1,0,0,0,11,50,1,0,0,0,13,62,1,0,0,0,15,64,1,0,0,0,17,66,1,0,0,0,19,20,
		5,40,0,0,20,2,1,0,0,0,21,22,5,41,0,0,22,4,1,0,0,0,23,27,7,0,0,0,24,26,
		7,1,0,0,25,24,1,0,0,0,26,29,1,0,0,0,27,25,1,0,0,0,27,28,1,0,0,0,28,38,
		1,0,0,0,29,27,1,0,0,0,30,32,5,39,0,0,31,33,9,0,0,0,32,31,1,0,0,0,33,34,
		1,0,0,0,34,35,1,0,0,0,34,32,1,0,0,0,35,36,1,0,0,0,36,38,5,39,0,0,37,23,
		1,0,0,0,37,30,1,0,0,0,38,6,1,0,0,0,39,40,5,58,0,0,40,41,5,45,0,0,41,8,
		1,0,0,0,42,46,7,2,0,0,43,45,7,1,0,0,44,43,1,0,0,0,45,48,1,0,0,0,46,44,
		1,0,0,0,46,47,1,0,0,0,47,10,1,0,0,0,48,46,1,0,0,0,49,51,7,3,0,0,50,49,
		1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,60,1,0,0,0,54,56,
		5,46,0,0,55,57,7,3,0,0,56,55,1,0,0,0,57,58,1,0,0,0,58,56,1,0,0,0,58,59,
		1,0,0,0,59,61,1,0,0,0,60,54,1,0,0,0,60,61,1,0,0,0,61,12,1,0,0,0,62,63,
		5,44,0,0,63,14,1,0,0,0,64,65,5,46,0,0,65,16,1,0,0,0,66,67,7,4,0,0,67,68,
		1,0,0,0,68,69,6,8,0,0,69,18,1,0,0,0,8,0,27,34,37,46,52,58,60,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace IronProlog.Parser
