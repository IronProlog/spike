//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from IronProlog/Grammar/Prolog.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace IronProlog.Parser {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IPrologListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class PrologBaseListener : IPrologListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PrologParser.knowledge_base"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKnowledge_base([NotNull] PrologParser.Knowledge_baseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PrologParser.knowledge_base"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKnowledge_base([NotNull] PrologParser.Knowledge_baseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PrologParser.clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClause([NotNull] PrologParser.ClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PrologParser.clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClause([NotNull] PrologParser.ClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PrologParser.fact"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFact([NotNull] PrologParser.FactContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PrologParser.fact"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFact([NotNull] PrologParser.FactContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PrologParser.rule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRule([NotNull] PrologParser.RuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PrologParser.rule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRule([NotNull] PrologParser.RuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PrologParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPredicate([NotNull] PrologParser.PredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PrologParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPredicate([NotNull] PrologParser.PredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PrologParser.functor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctor([NotNull] PrologParser.FunctorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PrologParser.functor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctor([NotNull] PrologParser.FunctorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>predicate_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPredicate_term([NotNull] PrologParser.Predicate_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>predicate_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPredicate_term([NotNull] PrologParser.Predicate_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>atom_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtom_term([NotNull] PrologParser.Atom_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>atom_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtom_term([NotNull] PrologParser.Atom_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>variable_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable_term([NotNull] PrologParser.Variable_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>variable_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable_term([NotNull] PrologParser.Variable_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>number_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber_term([NotNull] PrologParser.Number_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>number_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber_term([NotNull] PrologParser.Number_termContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace IronProlog.Parser
