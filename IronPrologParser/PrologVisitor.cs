//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from IronProlog/Grammar/Prolog.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace IronProlog.Parser {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="PrologParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public interface IPrologVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.knowledge_base"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKnowledge_base([NotNull] PrologParser.Knowledge_baseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClause([NotNull] PrologParser.ClauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.fact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFact([NotNull] PrologParser.FactContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRule([NotNull] PrologParser.RuleContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPredicate([NotNull] PrologParser.PredicateContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrologParser.functor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctor([NotNull] PrologParser.FunctorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>predicate_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPredicate_term([NotNull] PrologParser.Predicate_termContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>atom_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAtom_term([NotNull] PrologParser.Atom_termContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>variable_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable_term([NotNull] PrologParser.Variable_termContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>number_term</c>
	/// labeled alternative in <see cref="PrologParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumber_term([NotNull] PrologParser.Number_termContext context);
}
} // namespace IronProlog.Parser
